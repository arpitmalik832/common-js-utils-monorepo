/* eslint-disable no-console */
/**
 * Generates a list of icon files.
 * @file The file is saved as `generate_icons_list.js`.
 */
import fs from 'fs';
import yargs from 'yargs/yargs';
import { hideBin } from 'yargs/helpers';

import { getPaths } from '../src/utils/fileUtils.js';
import { getIcons } from './utils.js';

const { argv } = yargs(hideBin(process.argv))
  .option('projectRoot', {
    alias: 'r',
    type: 'string',
    description: 'Project root',
    demandOption: false,
  })
  .help()
  .example('node generate_icons_list.js -r /path/to/project');

/**
 * Processes icon files in the specified directory.
 * @param {string} iconsPath - The directory containing the icon files.
 * @param {string} iconsListPath - The path to the icons list file.
 * @example
 * // Example usage:
 * await processIcons('/path/to/icons', '/path/to/icons_list.mjs');
 */
function processIcons(iconsPath, iconsListPath) {
  const files = getIcons(iconsPath);
  const filesNew = files.map(i => i.replace(/\\/g, '/'));
  const content = `/**
 * List of icon files.
 * This file is autogenerated. Do not edit directly.
 * @file This file is saved as \`icons_list.mjs\`.
 */

/**
 * List of icon files.
 * @type {string[]}
 */
const list = ${JSON.stringify(filesNew, null, 2)}

export default list;
`;
  fs.writeFileSync(iconsListPath, content);
}

/**
 * Main function to generate the icons list.
 * @returns {void}
 * @example
 * main();
 */
function main() {
  const { projectRoot } = argv;

  if (!projectRoot) {
    console.error('\x1b[41m%s\x1b[0m', 'Project root is required');
    process.exit(1);
  }

  const projectRootTrimmed = projectRoot.trim();
  console.log('Generating icons list for project:', projectRootTrimmed);
  const paths = getPaths(projectRootTrimmed);
  console.log('Icons path:', paths.iconsPath);
  console.log('Icons list path:', paths.iconsListPath);
  processIcons(paths.iconsPath, paths.iconsListPath);
  console.log('\x1b[42m%s\x1b[0m', 'Successfully generated icons list');
}

main();
